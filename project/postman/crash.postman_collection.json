{
	"info": {
		"_postman_id": "1eacc8fd-591c-4211-bb19-3ecb1bbd0205",
		"name": "crash",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health",
			"item": [
				{
					"name": "Get UserSvc Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/user-svc/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-svc",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get BillingSvc Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/billing-svc/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing-svc",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get RentSvc Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/rent-svc/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rent-svc",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NotificationSvc Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/notification-svc/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification-svc",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CarSvc Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/car-svc/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"car-svc",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Car",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin is logged in\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    pm.collectionVariables.set(\"adminAccessToken\", pm.response.json().accessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/user-svc/auth/token?username=admin&password=admin",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-svc",
								"auth",
								"token"
							],
							"query": [
								{
									"key": "username",
									"value": "admin"
								},
								{
									"key": "password",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Car is created\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    pm.collectionVariables.set(\"carId\", pm.response.json().carId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"brand\": \"Audi\",\n  \"model\": \"A4\",\n  \"color\": \"Black\",\n  \"releaseDate\": \"2020-02-14T19:25:13.656Z\",\n  \"bodyStyle\": \"Saloon\",\n  \"doorsCount\": 4,\n  \"transmission\": \"Automatic\",\n  \"fuelType\": \"Petrol\",\n  \"pricePerKm\": 10,\n  \"pricePerHour\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/car-svc/cars",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"car-svc",
								"cars"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Client Profile",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is registered\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"user1\",\n  \"email\": \"crash202109@gmail.com\",\n  \"password\": \"user1\",\n  \"fullName\": \"User\",\n  \"phoneNumber\": \"123456\",\n  \"driverLicense\": \"1234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/user-svc/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-svc",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is logged in\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/user-svc/auth/token?username=user1&password=user1",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-svc",
								"auth",
								"token"
							],
							"query": [
								{
									"key": "username",
									"value": "user1"
								},
								{
									"key": "password",
									"value": "user1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User profile read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"User profile is correct\", () => {",
									"  pm.expect(pm.response.json().username).to.eql(\"user1\");",
									"  pm.expect(pm.response.json().email).to.eql(\"crash202109@gmail.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/user-svc/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-svc",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account is created\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"rub\",\n  \"balance\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/billing-svc/account",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing-svc",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Account is correct\", () => {",
									"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
									"  pm.expect(pm.response.json().balance).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/billing-svc/account",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing-svc",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account deposited\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Account is correct\", () => {",
									"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
									"  pm.expect(pm.response.json().balance).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/billing-svc/account/deposit?amount=100",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing-svc",
								"account",
								"deposit"
							],
							"query": [
								{
									"key": "amount",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Notifications read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Notifications count is correct\", () => {",
									"  pm.expect(pm.response.json().total).to.gt(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/notification-svc/notifications?start=0&size=10",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification-svc",
								"notifications"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rent",
			"item": [
				{
					"name": "Get Cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cars read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Cars count is correct\", () => {",
									"  pm.expect(pm.response.json().total).to.gt(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/car-svc/cars?start=0&size=10",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"car-svc",
								"cars"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rent is created\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    pm.collectionVariables.set(\"rentId\", pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"pm.collectionVariables.set(\"orderIdempotenceKey\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Idempotence-Key",
								"value": "{{orderIdempotenceKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"carId\": \"{{carId}}\",\n  \"data\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/rent-svc/rents",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rent-svc",
								"rents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rent read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Rent is correct\", () => {",
									"  pm.expect(pm.response.json().state).to.eql(\"Error\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 10000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rent-svc",
								"rents",
								"{{rentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Drive Car",
			"item": [
				{
					"name": "Login Car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Car is logged in\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    pm.collectionVariables.set(\"carAccessToken\", pm.response.json().accessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/car-svc/auth/token?carId={{carId}}&carApiKey=YdFQPySx9dXo7mGjkg3QVH2cUYIEDmst",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"car-svc",
								"auth",
								"token"
							],
							"query": [
								{
									"key": "carId",
									"value": "{{carId}}"
								},
								{
									"key": "carApiKey",
									"value": "YdFQPySx9dXo7mGjkg3QVH2cUYIEDmst"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Car state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Car state is updated\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{carAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"driveState\": \"Off\",\n  \"mileage\": 10,\n  \"locationLat\": 20,\n  \"locationLon\": 30,\n  \"remainingFuel\": 25,\n  \"alert\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/car-svc/carstate",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"car-svc",
								"carstate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Finish Rent",
			"item": [
				{
					"name": "Finish Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rent is finished\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}/finish",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rent-svc",
								"rents",
								"{{rentId}}",
								"finish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rent status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rent read\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"pm.test(\"Rent is correct\", () => {",
									"  pm.expect(pm.response.json().state).to.eql(\"Error\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 10000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rent-svc",
								"rents",
								"{{rentId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orderIdempotenceKey",
			"value": ""
		},
		{
			"key": "adminAccessToken",
			"value": ""
		},
		{
			"key": "carId",
			"value": ""
		},
		{
			"key": "rentId",
			"value": ""
		},
		{
			"key": "carAccessToken",
			"value": ""
		}
	]
}