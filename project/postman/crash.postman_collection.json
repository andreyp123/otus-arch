{
	"info": {
		"_postman_id": "1eacc8fd-591c-4211-bb19-3ecb1bbd0205",
		"name": "crash",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get UserSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BillingSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get RentSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get NotificationSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CarSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/car-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"car-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Admin is logged in\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"adminAccessToken\", pm.response.json().accessToken);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/auth/token?username=admin&password=admin",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"auth",
						"token"
					],
					"query": [
						{
							"key": "username",
							"value": "admin"
						},
						{
							"key": "password",
							"value": "admin"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Car is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"carId\", pm.response.json().carId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"brand\": \"Audi\",\n  \"model\": \"A4\",\n  \"color\": \"Black\",\n  \"releaseDate\": \"2020-02-14T19:25:13.656Z\",\n  \"bodyStyle\": \"Saloon\",\n  \"doorsCount\": 4,\n  \"transmission\": \"Automatic\",\n  \"fuelType\": \"Petrol\",\n  \"pricePerKm\": 10,\n  \"pricePerHour\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/car-svc/cars",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"car-svc",
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User is registered\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"email\": \"user1@user\",\n  \"password\": \"user1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User is logged in\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/auth/token?username=user1&password=user1",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"auth",
						"token"
					],
					"query": [
						{
							"key": "username",
							"value": "user1"
						},
						{
							"key": "password",
							"value": "user1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User profile read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"User profile is correct\", () => {",
							"  pm.expect(pm.response.json().username).to.eql(\"user1\");",
							"  pm.expect(pm.response.json().email).to.eql(\"user1@user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"email\": \"user1@user\",\n  \"password\": \"user1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Created Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
							"  pm.expect(pm.response.json().balance).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Cars read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Cars count is correct\", () => {",
							"  pm.expect(pm.response.json().total).to.gt(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/car-svc/cars?start=0&size=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"car-svc",
						"cars"
					],
					"query": [
						{
							"key": "start",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Rent 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rent is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"rentId\", pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"orderIdempotenceKey\", uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Idempotence-Key",
						"value": "{{orderIdempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"carId\": \"{{carId}}\",\n  \"data\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/rents",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"rents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Rent 1 status - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rent read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Rent is correct\", () => {",
							"  pm.expect(pm.response.json().state).to.eql(\"Error\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 10000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"rents",
						"{{rentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account deposited\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
							"  pm.expect(pm.response.json().balance).to.eql(100);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user1\",\n    \"email\": \"new_user1@user\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account/deposit?amount=100",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account",
						"deposit"
					],
					"query": [
						{
							"key": "amount",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Rent 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rent is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"rentId\", pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"orderIdempotenceKey\", uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Idempotence-Key",
						"value": "{{orderIdempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"carId\": \"{{carId}}\",\n  \"data\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/rents",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"rents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Rent 2 status - Started",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rent read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Rent is correct\", () => {",
							"  pm.expect(pm.response.json().state).to.eql(\"Started\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 10000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"rents",
						"{{rentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Notifications read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Notifications count is correct\", () => {",
							"  pm.expect(pm.response.json().total).to.gt(0);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification-svc/notifications?start=0&size=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification-svc",
						"notifications"
					],
					"query": [
						{
							"key": "start",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Finish Rent 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rent is finished\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/rent-svc/rents/{{rentId}}/finish",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rent-svc",
						"rents",
						"{{rentId}}",
						"finish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdraw Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account deposited\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
							"  pm.expect(pm.response.json().balance).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user1\",\n    \"email\": \"new_user1@user\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account/withdraw?amount=100",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account",
						"withdraw"
					],
					"query": [
						{
							"key": "amount",
							"value": "100"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orderIdempotenceKey",
			"value": ""
		},
		{
			"key": "adminAccessToken",
			"value": ""
		},
		{
			"key": "carId",
			"value": ""
		},
		{
			"key": "rentId",
			"value": ""
		}
	]
}