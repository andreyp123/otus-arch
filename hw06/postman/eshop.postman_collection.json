{
	"info": {
		"_postman_id": "1eacc8fd-591c-4211-bb19-3ecb1bbd0205",
		"name": "eshop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get UserSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BillingSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get OrderSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/order-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get NotificationSvc Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification-svc/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification-svc",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User is registered\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"email\": \"user1@user\",\n  \"password\": \"user1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User is logged in\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/auth/token?username=user1&password=user1",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"auth",
						"token"
					],
					"query": [
						{
							"key": "username",
							"value": "user1"
						},
						{
							"key": "password",
							"value": "user1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User profile read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"User profile is correct\", () => {",
							"  pm.expect(pm.response.json().username).to.eql(\"user1\");",
							"  pm.expect(pm.response.json().email).to.eql(\"user1@user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/user-svc/cabinet",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user-svc",
						"cabinet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"email\": \"user1@user\",\n  \"password\": \"user1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Created Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
							"  pm.expect(pm.response.json().balance).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account deposited\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().currency).to.eql(\"rub\");",
							"  pm.expect(pm.response.json().balance).to.eql(100);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user1\",\n    \"email\": \"new_user1@user\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account/deposit?amount=100",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account",
						"deposit"
					],
					"query": [
						{
							"key": "amount",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"orderIdempotenceKey\", uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Idempotence-Key",
						"value": "{{orderIdempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"amount\": 50,\n  \"data\": \"order 1 details\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order-svc/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order-svc",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order 1 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is duplicated\", () => {",
							"  pm.expect(pm.response.code).to.eql(409);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Idempotence-Key",
						"value": "{{orderIdempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"amount\": 50,\n  \"data\": \"order 1 details\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order-svc/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order-svc",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Withdrawn Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().balance).to.eql(50);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notifications with 1 order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Notifications read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Notifications count is correct\", () => {",
							"  pm.expect(pm.response.json().total).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification-svc/notifications?start=0&size=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification-svc",
						"notifications"
					],
					"query": [
						{
							"key": "start",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order 2 is created\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"orderIdempotenceKey\", uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Idempotence-Key",
						"value": "{{orderIdempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"amount\": 500,\n  \"data\": \"order 1 details\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order-svc/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order-svc",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not Withdrawn Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Account is correct\", () => {",
							"  pm.expect(pm.response.json().balance).to.eql(50);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/billing-svc/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing-svc",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notifications with 2 orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Notifications read\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Notifications count is correct\", () => {",
							"  pm.expect(pm.response.json().total).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification-svc/notifications?start=0&size=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification-svc",
						"notifications"
					],
					"query": [
						{
							"key": "start",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orderIdempotenceKey",
			"value": ""
		}
	]
}